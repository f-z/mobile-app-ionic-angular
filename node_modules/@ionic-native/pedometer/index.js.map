{"version":3,"sources":["../../../src/@ionic-native/plugins/pedometer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAc3C;;;;;;;;;;;;;;;;;;;GAmBG;AASH;IAA+B,6BAAiB;IAAhD;;IAkEA,CAAC;IAhEC;;;OAGG;IAEH,2CAAuB,GAAvB,cAA8C,MAAM,CAAC,CAAC,CAAC;IAEvD;;;;;OAKG;IAEH,uCAAmB,GAAnB,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;;;OAKG;IAEH,4CAAwB,GAAxB,cAA+C,MAAM,CAAC,CAAC,CAAC;IAExD;;;;;;MAME;IAKF,yCAAqB,GAArB,cAAsD,MAAM,CAAC,CAAC,CAAC;IAE/D;;;OAGG;IAEH,wCAAoB,GAApB,cAAuC,MAAM,CAAC,CAAC,CAAC;IAEhD;;;;;;;OAOG;IAIH,6BAAS,GAAT,UAAU,OAA2C,IAA6B,MAAM,CAAC,CAAC,CAAC;IAEtF,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1DA;QADC,OAAO,EAAE;;;;4DAC6C;IASvD;QADC,OAAO,EAAE;;;;wDACyC;IASnD;QADC,OAAO,EAAE;;;;6DAC8C;IAaxD;QAJC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,sBAAsB;SACtC,CAAC;;;wCACuB,UAAU;0DAA4B;IAO/D;QADC,OAAO,EAAE;;;;yDACsC;IAahD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;8CACyF;IA1DhF,SAAS;QARrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,yDAAyD;YAC/D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,SAAS,CAkErB;IAAD,gBAAC;CAlED,AAkEC,CAlE8B,iBAAiB,GAkE/C;SAlEY,SAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\n\n/**\n * Interface of a pedometer data object which is returned by watching for new data or by recieving historical data\n */\nexport interface IPedometerData {\n  startDate?: number;\n  endDate?: number;\n  numberOfSteps: number;\n  distance: number;\n  floorsAscended: number;\n  floorsDescended: number;\n}\n\n/**\n * @name Pedometer\n * @description\n * Fetch pedestrian-related pedometer data,\n * such as step counts and other information about the distance travelled.\n *\n * @usage\n * ```typescript\n * import { Pedometer } from '@ionic-native/pedometer';\n *\n * Pedometer.isDistanceAvailable()\n *   .then((available: boolean) => console.log(available))\n *   .catch((error: any) => console.log(error));\n *\n * Pedometer.startPedometerUpdates()\n *    .subscribe((data: IPedometerData) => {\n *      console.log(data);\n *    });\n * ```\n */\n@Plugin({\n  pluginName: 'Pedometer',\n  plugin: 'cordova-plugin-pedometer',\n  pluginRef: 'pedometer',\n  repo: 'https://github.com/leecrossley/cordova-plugin-pedometer',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Pedometer extends IonicNativePlugin {\n\n  /**\n   * Checks if step counting is available. Only works on iOS.\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\n   */\n  @Cordova()\n  isStepCountingAvailable(): Promise<boolean> { return; }\n\n  /**\n   * Distance estimation indicates the ability to use step information to supply the approximate distance travelled by the user.\n   * This capability is not supported on all devices, even with iOS 8.\n   * Only works on iOS.\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\n   */\n  @Cordova()\n  isDistanceAvailable(): Promise<boolean> { return; }\n\n  /**\n   * Floor counting indicates the ability to count the number of floors the user walks up or down using stairs.\n   * This capability is not supported on all devices, even with iOS 8.\n   * Only works on iOS.\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\n   */\n  @Cordova()\n  isFloorCountingAvailable(): Promise<boolean> { return; }\n\n  /**\n  * Starts the delivery of recent pedestrian-related data to your Cordova app.\n  *\n  * When the app is suspended, the delivery of updates stops temporarily.\n  * Upon returning to foreground or background execution, the pedometer object begins updates again.\n  * @return {Observable<IPedometerData>} Returns a Observable that recieves repeatly data from pedometer in background.\n  */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopPedometerUpdates'\n  })\n  startPedometerUpdates(): Observable<IPedometerData> { return; }\n\n  /**\n   * Stops the delivery of recent pedestrian data updates to your Cordova app.\n   * @return {Promise<boolean>} Returns a promise that resolves when pedometer watching was stopped\n   */\n  @Cordova()\n  stopPedometerUpdates(): Promise<any> { return; }\n\n  /**\n   * Retrieves the data between the specified start and end dates.\n   * The startDate and endDate options are required and can be constructed in any valid JavaScript way\n   * (e.g. new Date(2015, 4, 1, 15, 20, 00) is also valid, as is milliseconds).\n   * Only works on iOS.\n   * @param {any} options  start date and en date where you want to get pedometer data\n   * @return {Promise<IPedometerData>} Returns a promise that resolves when pedometer data found\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  queryData(options: { startDate: Date, endDate: Date }): Promise<IPedometerData> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}